{"version":3,"sources":["webpack:///./src/components/gallery-page/cornerCaseHandler.js","webpack:///./src/templates/postcardTemplate.js"],"names":["CornerCaseHandler","props","state","alreadyFetched","g","currId","nextId","componentDidMount","this","setState","lastFetchedPage","cursor","p","length","id","loadMore","render","React","Component","PostcardTemplate","handleKeyDown","event","keyCode","navigate","pageContext","prevId","getStatePassForPrev","getStatePassForNext","bind","fullScreenChangeHandler","enterFullScreenAndRender","exitFullScreenAndRender","currentImageLoaded","nextImageLoaded","prevImageLoaded","placeholderTransitionDuration","zIndexes","getFromPassedStateOrDefault","isFullScreen","key","defaultVal","location","z","next","enterFullScreen","exitFullScreen","document","webkitIsFullScreen","mozFullScreen","msFullscreenElement","useOfQueryParams","window","href","includes","addEventListener","componentWillMount","split","replace","componentWillUnmount","timer1","clearTimeout","timer2","removeEventListener","c","Helmet","charSet","Consumer","globalState","image","to","title","style","position","height","width","left","zIndex","theme","color","brand","primary","right","className","top","transform","highlight","bottom","onClick","fluid","originalImg","download","onLoad","src","initialRender","srcSet","sizes","alt","importance","tracedSVG","borderRadius","prefetchNext1","prefetchPrev","prefetchNext2"],"mappings":"gQASO,IAAMA,EAAb,Y,QAEI,WAAYC,GAAQ,IAAD,SACf,cAAMA,IAAN,MACKC,MAAQ,CACTC,gBAAgB,EAChBC,EAAGH,EAAMG,EACTC,OAAQJ,EAAMI,OACdC,OAAQL,EAAMK,QANH,E,EAFvB,G,EAAA,G,6EAAA,2BAYIC,kBAAA,WACI,IAAIC,KAAKN,MAAMC,eAAf,CAGAK,KAAKC,SAAS,CACVN,gBAAgB,IAGpB,IAAMC,EAAII,KAAKN,MAAME,EACfM,EAAkB,QAAUN,EAAEO,OAAO,GAC3C,GAAKP,EAAEM,GAAP,CAQA,IAAME,EAAIR,EAAEM,GACK,IAAbE,EAAEC,QAIFD,EAAEA,EAAEC,OAAO,GAAGC,GAAMN,KAAKN,MAAMI,QAG/BF,EAAEW,gBAXFX,EAAEW,aA3Bd,EA0CIC,OAAA,WACI,OACI,gCA5CZ,GAAuCC,IAAMC,W,2ICOvCC,E,oBACJ,WAAYlB,GAAQ,IAAD,SACjB,cAAMA,IAAN,MA4FFmB,cAAgB,SAAAC,GACQ,KAAlBA,EAAMC,QAERC,mBAAS,WAAW,EAAKrB,MAAMsB,YAAYC,OAAU,CACnDvB,MAAO,EAAKwB,wBAEa,KAAlBL,EAAMC,SAEfC,mBAAS,WAAW,EAAKrB,MAAMsB,YAAYlB,OAAU,CACnDJ,MAAO,EAAKyB,yBAnGhB,EAAKP,cAAgB,EAAKA,cAAcQ,KAAnB,MACrB,EAAKC,wBAA0B,EAAKA,wBAAwBD,KAA7B,MAC/B,EAAKE,yBAA2B,EAAKA,yBAAyBF,KAA9B,MAChC,EAAKG,wBAA0B,EAAKA,wBAAwBH,KAA7B,MAC/B,EAAKI,mBAAqB,EAAKA,mBAAmBJ,KAAxB,MAC1B,EAAKK,gBAAkB,EAAKA,gBAAgBL,KAArB,MACvB,EAAKM,gBAAkB,EAAKA,gBAAgBN,KAArB,MACvB,EAAKD,oBAAsB,EAAKA,oBAAoBC,KAAzB,MAC3B,EAAKF,oBAAsB,EAAKA,oBAAoBE,KAAzB,MAG3B,EAAKO,8BAAgC,IACrC,EAAKC,SAAW,EAAKA,WAErB,EAAKlC,MAAQ,CACXsB,YAAa,EAAKa,4BAChB,cACA,EAAKpC,MAAMuB,aAEbQ,mBAAoB,EAAKK,4BACvB,sBACA,GAEFC,aAAc,EAAKD,4BAA4B,gBAAgB,GAC/DJ,gBAAiB,EAAKI,4BACpB,mBACA,GAEFH,gBAAiB,EAAKG,4BACpB,mBACA,IAjCa,E,kHAsCnBA,4BAAA,SAA4BE,EAAKC,GAC/B,YADmD,IAApBA,OAAa,GAEzChC,KAAKP,MAAMwC,UACXjC,KAAKP,MAAMwC,SAASvC,OACpBM,KAAKP,MAAMwC,SAASvC,MAAMqC,GAGtB/B,KAAKP,MAAMwC,SAASvC,MAAMqC,GADxBC,G,EAIXJ,SAAA,WAEE,IAAMM,EAAI,GACNC,EAAO,EAMX,OALAD,EAAC,iBAAuBC,IACxBD,EAAC,wBAA8BC,IAC/BD,EAAC,aAAmBC,IACpBD,EAAC,eAAqBC,IACtBD,EAAC,WAAiBC,IACXD,G,EAGTZ,yBAAA,WACEc,cACApC,KAAKC,SAAS,CAEZ6B,cAAc,K,EAIlBP,wBAAA,WACEc,cACArC,KAAKC,SAAS,CAEZ6B,cAAc,K,EAIlBT,wBAAA,WAKOiB,WAEFA,SAASC,oBACTD,SAASE,eACTF,SAASG,oBAIVzC,KAAKsB,2BAFLtB,KAAKuB,4B,EAoBTmB,iBAAA,WACE,MACoB,oBAAXC,QACPA,QACAA,OAAOV,SAASW,KAAKC,SAAS,4B,EAIlC9C,kBAAA,WAGwB,oBAAbuC,UACPA,SAASQ,kBACT9C,KAAKN,MAAMsB,aAEXsB,SAASQ,iBAAiB,UAAW9C,KAAKY,eAIpB,oBAAb0B,UAA4BA,SAASQ,mBAC9CR,SAASQ,iBACP,yBACA9C,KAAKqB,yBACL,GAEFiB,SAASQ,iBACP,sBACA9C,KAAKqB,yBACL,GAEFiB,SAASQ,iBACP,mBACA9C,KAAKqB,yBACL,GAEFiB,SAASQ,iBACP,qBACA9C,KAAKqB,yBACL,K,EAKN0B,mBAAA,WACE,GACE/C,KAAK0C,qBACJ1C,KAAK6B,4BAA4B,eAClC,CAEA,IAAMvB,EAAKqC,OAAOV,SAASW,KAAKI,MAAM,2BAA2B,GACjEjC,mBAAS,WAAWT,EAAM,CACxB2C,SAAS,M,EAKfzB,mBAAA,WAEExB,KAAKC,SAAS,CACZuB,oBAAoB,K,EAIxBC,gBAAA,WACEzB,KAAKC,SAAS,CACZwB,iBAAiB,K,EAIrBC,gBAAA,WACE1B,KAAKC,SAAS,CACZyB,iBAAiB,K,EAIrBwB,qBAAA,WACMlD,KAAKmD,QACPC,aAAapD,KAAKmD,QAEhBnD,KAAKqD,QACPD,aAAapD,KAAKqD,QAEI,oBAAbf,UAA4BA,SAASgB,sBAC9ChB,SAASgB,oBAAoB,UAAWtD,KAAKY,eAC7C0B,SAASgB,oBACP,yBACAtD,KAAKqB,yBACL,GAEFiB,SAASgB,oBACP,sBACAtD,KAAKqB,yBACL,GAEFiB,SAASgB,oBACP,mBACAtD,KAAKqB,yBACL,GAEFiB,SAASgB,oBACP,qBACAtD,KAAKqB,yBACL,K,EAKNF,oBAAA,WACE,MAAO,CACLW,aAAc9B,KAAKN,MAAMoC,aACzBN,mBAAoBxB,KAAKN,MAAM+B,gBAC/BC,gBAAiB1B,KAAKN,MAAM8B,qB,EAIhCN,oBAAA,WACE,MAAO,CACLY,aAAc9B,KAAKN,MAAMoC,aACzBN,mBAAoBxB,KAAKN,MAAMgC,gBAC/BD,gBAAiBzB,KAAKN,MAAM8B,qB,EAIhChB,OAAA,WAAU,IAAD,OACD+C,EAAIvD,KAAKN,MAAMsB,YAErB,OACE,8BACE,YAACwC,EAAA,EAAD,KACE,oBAAMC,QAAQ,UACd,0CAIA,4wEA6BF,YAAC,IAAmBC,SAApB,MACG,SAAAC,GAAW,OACV,8BACE,YAAC,EAAD,CACE/D,EAAG+D,EACH9D,OAAQ0D,EAAEK,MAAMtD,GAChBR,OAAQyD,EAAEzD,SAIZ,YAAC,OAAD,CACE+D,GAAE,WAAaN,EAAEtC,OACjBvB,MAAO,EAAKwB,sBACZ4C,MAAOP,EAAEK,MAAME,OAEf,oBACEC,MAAO,CACLC,SAAU,QACVC,OAAQ,OACRC,MAAO,MACPC,KAAM,MACNC,OAAQ,EAAKxC,SAAL,gBANZ,sCAmQkB,EAAKD,8BAKL,EAAKA,8BAKR,EAAKC,SAAL,iBAYHyC,IAAMC,MAAMC,MAAMC,QAEf,EAAK5C,SAAL,kBAjRjB,YAAC,OAAD,CACEiC,GAAE,WAAaN,EAAEzD,OACjBJ,MAAO,EAAKyB,sBACZ2C,MAAOP,EAAEK,MAAME,OAEf,oBACEC,MAAO,CACLC,SAAU,QACVC,OAAQ,OACRC,MAAO,MACPO,MAAO,MACPL,OAAQ,EAAKxC,SAAL,gBANZ,sCAoPkB,EAAKD,8BAKL,EAAKA,8BAKR,EAAKC,SAAL,iBAYHyC,IAAMC,MAAMC,MAAMC,QAEf,EAAK5C,SAAL,kBAhQjB,YAAC,OAAD,CACEiC,GAAE,WAAaN,EAAEtC,OACjBvB,MAAO,EAAKwB,uBAEZ,YAAC,IAAD,CACEwD,UAAU,eACVX,MAAO,CACLI,KAAM,OACNQ,IAAK,MACLC,UAAW,oBAEbd,MAAM,oBAGV,YAAC,OAAD,CACED,GAAE,WAAaN,EAAEzD,OACjBJ,MAAO,EAAKyB,uBAEZ,YAAC,IAAD,CACEuD,UAAU,eACVX,MAAO,CACLU,MAAO,OACPE,IAAK,MACLC,UAAW,oBAEbd,MAAM,gBAKV,0DA0MoB,EAAKnC,8BAKL,EAAKA,8BAKR,EAAKC,SAAL,iBAYHyC,IAAMC,MAAMC,MAAMC,QAEf,EAAK5C,SAAL,eAlOjB,MACE,YAAC,OAAD,CAIEiC,GAAE,UACFnE,MAAO,CAAEmF,UAAWtB,EAAEK,MAAMtD,IAC5BwD,MAAM,mBAEN,YAAC,IAAD,CAAeC,MAAO,CAAEU,MAAO,OAAQE,IAAK,YAKhD,0DA4LoB,EAAKhD,8BAKL,EAAKA,8BAKR,EAAKC,SAAL,iBAYHyC,IAAMC,MAAMC,MAAMC,QAEf,EAAK5C,SAAL,eApNjB,eACG,EAAKlC,MAAMoC,cACV,YAAC,IAAD,CACEiC,MAAO,CAAEU,MAAO,OAAQK,OAAQ,OAAQ3E,OAAQ,WAChD2D,MAAM,wBACNiB,QAAS,EAAKxD,2BAGhB,EAAK7B,MAAMoC,cACX,YAAC,IAAD,CACEiC,MAAO,CAAEU,MAAO,OAAQK,OAAQ,OAAQ3E,OAAQ,WAChD2D,MAAM,yBACNiB,QAAS,EAAKzD,4BAMpB,0DA0KoB,EAAKK,8BAKL,EAAKA,8BAKR,EAAKC,SAAL,iBAYHyC,IAAMC,MAAMC,MAAMC,QAEf,EAAK5C,SAAL,eAlMjB,aACE,iBAAGgB,KAAMW,EAAEK,MAAMoB,MAAMC,YAAaC,UAAQ,EAA5C,sCAyKkB,EAAKvD,8BAKL,EAAKA,8BAKR,EAAKC,SAAL,iBAYHyC,IAAMC,MAAMC,MAAMC,QAEf,EAAK5C,SAAL,gBAhMb,YAAC,IAAD,CACEmC,MAAO,CAAEU,MAAO,OAAQK,OAAQ,QAChChB,MAAM,qBAcZ,mBAIEqB,OAAQ,EAAK3D,mBACb4D,IACEzB,EAAY0B,cAAgB,GAAK9B,EAAEK,MAAMoB,MAAMC,YAEjDK,OACE3B,EAAY0B,cAAgB,GAAK9B,EAAEK,MAAMoB,MAAMM,OAEjDC,MACE5B,EAAY0B,cAAgB,GAAK9B,EAAEK,MAAMoB,MAAMO,MAEjDC,IAAI,GACJ1B,MAAOP,EAAEK,MAAME,MACf2B,WAAW,OACX1B,MAAO,CAAEK,OAAQ,EAAKxC,SAAL,cAjBnB,sCAwJoB,EAAKD,8BAKL,EAAKA,8BAKR,EAAKC,SAAL,iBAYHyC,IAAMC,MAAMC,MAAMC,QAEf,EAAK5C,SAAL,eAhLjB,iCAEI,EAAKlC,MAAM8B,mBAAqB,UAAY,UAmBhD,mBAIE4D,IAAK7B,EAAEK,MAAMoB,MAAMU,UACnBF,IAAI,GACJzB,MAAO,CACLK,OAAQ,EAAKxC,SAAL,wBACRqC,OAAQ,QACR0B,aAAc,OATlB,sCAmIoB,EAAKhE,8BAKL,EAAKA,8BAKR,EAAKC,SAAL,iBAYHyC,IAAMC,MAAMC,MAAMC,QAEf,EAAK5C,SAAL,eA3JjB,6BAEI,EAAKlC,MAAM8B,mBAAqB,WAAa,MAYjD,8DAqHoB,EAAKG,8BAKL,EAAKA,8BAKR,EAAKC,SAAL,iBAYHyC,IAAMC,MAAMC,MAAMC,QAEf,EAAK5C,SAAL,gBA5If,mBAEEwD,IAAK7B,EAAEK,MAAMoB,MAAMC,YACnBK,OAAQ/B,EAAEK,MAAMoB,MAAMM,OACtBC,MAAOhC,EAAEK,MAAMoB,MAAMO,MACrBC,IAAI,GACJ1B,MAAOP,EAAEK,MAAME,MACf2B,WAAW,OACX1B,MAAO,CAAEK,OAAQ,EAAKxC,SAAL,cARnB,sCAoHkB,EAAKD,8BAKL,EAAKA,8BAKR,EAAKC,SAAL,iBAYHyC,IAAMC,MAAMC,MAAMC,QAEf,EAAK5C,SAAL,eA5If,iCAUA,sLAWD,EAAKlC,MAAM8B,oBACV,8BACE,mBACE2D,OAAQ,EAAK1D,gBAEb2D,IACEzB,EAAY0B,cACR,GACA9B,EAAEqC,cAAcX,YAEtBK,OACE3B,EAAY0B,cAAgB,GAAK9B,EAAEqC,cAAcN,OAEnDC,MACE5B,EAAY0B,cAAgB,GAAK9B,EAAEqC,cAAcL,MAEnDC,IAAI,GACJC,WAAW,MAfb,sCA6FgB,EAAK9D,8BAKL,EAAKA,8BAKR,EAAKC,SAAL,iBAYHyC,IAAMC,MAAMC,MAAMC,QAEf,EAAK5C,SAAL,eArHb,sBAiBA,mBACEuD,OAAQ,EAAKzD,gBAEb0D,IACEzB,EAAY0B,cACR,GACA9B,EAAEsC,aAAaZ,YAErBK,OACE3B,EAAY0B,cAAgB,GAAK9B,EAAEsC,aAAaP,OAElDC,MACE5B,EAAY0B,cAAgB,GAAK9B,EAAEsC,aAAaN,MAElDC,IAAI,GACJC,WAAW,MAfb,sCA4EgB,EAAK9D,8BAKL,EAAKA,8BAKR,EAAKC,SAAL,iBAYHyC,IAAMC,MAAMC,MAAMC,QAEf,EAAK5C,SAAL,eApGb,sBAiBA,mBAEEwD,IACE7B,EAAEuC,cAAcb,YAElBK,OAAQ/B,EAAEuC,cAAcR,OACxBC,MAAOhC,EAAEuC,cAAcP,MACvBC,IAAI,GACJC,WAAW,MARb,sCA2DgB,EAAK9D,8BAKL,EAAKA,8BAKR,EAAKC,SAAL,iBAYHyC,IAAMC,MAAMC,MAAMC,QAEf,EAAK5C,SAAL,eAnFb,uBArNN,0CAgRsB,EAAKD,8BAKL,EAAKA,8BAKR,EAAKC,SAAL,iBAYHyC,IAAMC,MAAMC,MAAMC,QAEf,EAAK5C,SAAL,aAxSnB,8wBAgRsB,EAAKD,8BAhR3B,yBAgRsB,EAAKA,8BAhR3B,sFAqRsB,EAAKA,8BArR3B,0BAqRsB,EAAKA,8BArR3B,oFA0RmB,EAAKC,SAAL,iBA1RnB,8HAsSgByC,IAAMC,MAAMC,MAAMC,QAtSlC,wBAwSmB,EAAK5C,SAAL,WAxSnB,qC,GAjRmBnB,IAAMC,WAykBtBC","file":"component---src-templates-postcard-template-js-0fe24ab4cce2c8e59582.js","sourcesContent":["import React from \"react\"\n\n/* This is used to handle a corner case where the user browses many photos and\n * then returns to the gallery by clicking 'x'. We're trying to anchor to the\n * thumbnail corresponding to the last photo that the user viewed. However,\n * it may be possible that the gallery hasn't yet fetched metadata for thumbnails\n * so far down. In this case, clicking 'x' causes the anchor link to fail and\n * the user encounters an unfamiliar scroll position. To avoid this issue we want\n * to keep gallery metadata up to date as we browse photos in postcard view. */\nexport class CornerCaseHandler extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            alreadyFetched: false,\n            g: props.g,\n            currId: props.currId,\n            nextId: props.nextId\n        }\n    }\n\n    componentDidMount() {\n        if (this.state.alreadyFetched) {\n            return\n        }\n        this.setState({\n            alreadyFetched: true\n        })\n    \n        const g = this.state.g\n        const lastFetchedPage = \"page\" + (g.cursor-1)\n        if (!g[lastFetchedPage]) {\n            /* Another corner case: user enters postcard view without visiting gallery.\n             * Note that we are not properly handling this case (we should fetch enough\n             * metadata up to whichever image the user is looking at - instead we only\n             * fetch 1 page worth of metadata items per each photo that the user views.) */\n            g.loadMore()\n            return\n        }\n        const p = g[lastFetchedPage]\n        if (p.length === 0) {\n            /* This shouldn't happen but if it does we don't want to crash. */\n            return\n        }\n        if (p[p.length-1].id < (this.state.nextId)) {\n            /* If we are almost at the last photo with thumbnail metadata,\n            * then fetch more metadata (thumbnail _data_ will not be fetched yet). */\n            g.loadMore()\n        }\n    }\n\n    render() {\n        return (\n            <></>\n        )\n    }\n}","import React from \"react\"\nimport { Helmet } from \"react-helmet\"\nimport { Link, navigate } from \"gatsby\"\nimport theme from \"../theme.yaml\"\nimport {\n  FaTimesCircle,\n  FaArrowLeft,\n  FaArrowRight,\n  FaExpand,\n  FaCompress,\n  FaDownload,\n} from \"react-icons/fa\"\nimport { GlobalStateContext } from \"../components/gallery-page/globalState.js\"\nimport { CornerCaseHandler } from \"../components/gallery-page/cornerCaseHandler.js\"\nimport { enterFullScreen, exitFullScreen } from \"../util/fullScreenHelpers.js\"\n\nclass PostcardTemplate extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleKeyDown = this.handleKeyDown.bind(this)\n    this.fullScreenChangeHandler = this.fullScreenChangeHandler.bind(this)\n    this.enterFullScreenAndRender = this.enterFullScreenAndRender.bind(this)\n    this.exitFullScreenAndRender = this.exitFullScreenAndRender.bind(this)\n    this.currentImageLoaded = this.currentImageLoaded.bind(this)\n    this.nextImageLoaded = this.nextImageLoaded.bind(this)\n    this.prevImageLoaded = this.prevImageLoaded.bind(this)\n    this.getStatePassForNext = this.getStatePassForNext.bind(this)\n    this.getStatePassForPrev = this.getStatePassForPrev.bind(this)\n\n    /* Magic numbers. */\n    this.placeholderTransitionDuration = 1000\n    this.zIndexes = this.zIndexes()\n\n    this.state = {\n      pageContext: this.getFromPassedStateOrDefault(\n        \"pageContext\",\n        this.props.pageContext\n      ) /* Explained in README. */,\n      currentImageLoaded: this.getFromPassedStateOrDefault(\n        \"currentImageLoaded\",\n        false\n      ),\n      isFullScreen: this.getFromPassedStateOrDefault(\"isFullScreen\", false),\n      nextImageLoaded: this.getFromPassedStateOrDefault(\n        \"nextImageLoaded\",\n        false\n      ),\n      prevImageLoaded: this.getFromPassedStateOrDefault(\n        \"prevImageLoaded\",\n        false\n      ),\n    }\n  }\n\n  getFromPassedStateOrDefault(key, defaultVal = false) {\n    if (\n      !this.props.location ||\n      !this.props.location.state ||\n      !this.props.location.state[key]\n    )\n      return defaultVal\n    return this.props.location.state[key]\n  }\n\n  zIndexes() {\n    /* Doing it like this to reduce hidden dependencies. */\n    const z = {}\n    var next = 1\n    z[\"prefetchedImages\"] = next++\n    z[\"currentImagePlaceholder\"] = next++\n    z[\"currentImage\"] = next++\n    z[\"invisibleLinks\"] = next++\n    z[\"navButtons\"] = next++\n    return z\n  }\n\n  enterFullScreenAndRender() {\n    enterFullScreen()\n    this.setState({\n      /* Re-render with the correct toggle icon. */\n      isFullScreen: true,\n    })\n  }\n\n  exitFullScreenAndRender() {\n    exitFullScreen()\n    this.setState({\n      /* Re-render with the correct toggle icon. */\n      isFullScreen: false,\n    })\n  }\n\n  fullScreenChangeHandler() {\n    /* This exists to detect changes in full screen initiated with browser functions (as opposed to our fullscreen icon).\n     * Note that we still need functions enterFullScreenAndRender and exitFullScreenAndRender.\n     * Even though this does the same thing, devices are usually slow to enter/exit full screen mode,\n     * so if we immediately render a change in icon, the user doesn't feel like something is broken. */\n    if (!document) return\n    if (\n      !document.webkitIsFullScreen &&\n      !document.mozFullScreen &&\n      !document.msFullscreenElement\n    ) {\n      this.exitFullScreenAndRender()\n    } else {\n      this.enterFullScreenAndRender()\n    }\n  }\n\n  handleKeyDown = event => {\n    if (event.keyCode === 37) {\n      /* Left arrow. */\n      navigate(`/images/${this.state.pageContext.prevId}`, {\n        state: this.getStatePassForPrev(),\n      })\n    } else if (event.keyCode === 39) {\n      /* Right arrow. */\n      navigate(`/images/${this.state.pageContext.nextId}`, {\n        state: this.getStatePassForNext(),\n      })\n    }\n  }\n\n  useOfQueryParams() {\n    return (\n      typeof window !== \"undefined\" &&\n      window &&\n      window.location.href.includes(\"/images/fromGallery?id=\")\n    )\n  }\n\n  componentDidMount() {\n    /* Keyboard listener for arrow key navigation. */\n    if (\n      typeof document !== \"undefined\" &&\n      document.addEventListener &&\n      this.state.pageContext\n    ) {\n      document.addEventListener(\"keydown\", this.handleKeyDown)\n    }\n\n    /* Fullscreen change listener to detect when user presses ESC to exit fullscreen. */\n    if (typeof document !== \"undefined\" && document.addEventListener) {\n      document.addEventListener(\n        \"webkitfullscreenchange\",\n        this.fullScreenChangeHandler,\n        false\n      )\n      document.addEventListener(\n        \"mozfullscreenchange\",\n        this.fullScreenChangeHandler,\n        false\n      )\n      document.addEventListener(\n        \"fullscreenchange\",\n        this.fullScreenChangeHandler,\n        false\n      )\n      document.addEventListener(\n        \"MSFullscreenChange\",\n        this.fullScreenChangeHandler,\n        false\n      )\n    }\n  }\n\n  componentWillMount() {\n    if (\n      this.useOfQueryParams() &&\n      !this.getFromPassedStateOrDefault(\"pageContext\")\n    ) {\n      /* Safeguard against the (unlikely) case where someone uses /images/fromGallery?id=... as an entry-point to the site. */\n      const id = window.location.href.split(\"/images/fromGallery?id=\")[1]\n      navigate(`/images/${id}`, {\n        replace: true,\n      })\n    }\n  }\n\n  currentImageLoaded() {\n    /* Trigger re-render, start possible transition. */\n    this.setState({\n      currentImageLoaded: true,\n    })\n  }\n\n  nextImageLoaded() {\n    this.setState({\n      nextImageLoaded: true,\n    })\n  }\n\n  prevImageLoaded() {\n    this.setState({\n      prevImageLoaded: true,\n    })\n  }\n\n  componentWillUnmount() {\n    if (this.timer1) {\n      clearTimeout(this.timer1)\n    }\n    if (this.timer2) {\n      clearTimeout(this.timer2)\n    }\n    if (typeof document !== \"undefined\" && document.removeEventListener) {\n      document.removeEventListener(\"keydown\", this.handleKeyDown)\n      document.removeEventListener(\n        \"webkitfullscreenchange\",\n        this.fullScreenChangeHandler,\n        false\n      )\n      document.removeEventListener(\n        \"mozfullscreenchange\",\n        this.fullScreenChangeHandler,\n        false\n      )\n      document.removeEventListener(\n        \"fullscreenchange\",\n        this.fullScreenChangeHandler,\n        false\n      )\n      document.removeEventListener(\n        \"MSFullscreenChange\",\n        this.fullScreenChangeHandler,\n        false\n      )\n    }\n  }\n\n  getStatePassForNext() {\n    return {\n      isFullScreen: this.state.isFullScreen,\n      currentImageLoaded: this.state.nextImageLoaded,\n      prevImageLoaded: this.state.currentImageLoaded,\n    }\n  }\n\n  getStatePassForPrev() {\n    return {\n      isFullScreen: this.state.isFullScreen,\n      currentImageLoaded: this.state.prevImageLoaded,\n      nextImageLoaded: this.state.currentImageLoaded,\n    }\n  }\n\n  render() {\n    const c = this.state.pageContext\n\n    return (\n      <>\n        <Helmet>\n          <meta charSet=\"utf-8\" />\n          <title>{\n            `Photo of Nabi` /* Note: not a good idea to put image id here (needs JS to render the correct id). */\n          }</title>\n\n          <style>\n            {/* \n                Set some CSS attributes into html and body tags of this page.\n                We do this here because a Gatsby bug prevents us from doing it the clean way\n                (which would be: using separate CSS files for setting separate html/body attributes to different pages).\n            */}\n            {`\n              html {\n                height: 100%;\n                overflow-y: hidden !important;\n                overflow-x: hidden !important;\n              }\n              body {\n                height: 100%;\n                background-color: #fcf7e9;\n                margin: 0 0 0 0;\n                background-image: url(\"data:image/svg+xml,%3Csvg width='180' height='180' viewBox='0 0 180 180' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M81.28 88H68.413l19.298 19.298L81.28 88zm2.107 0h13.226L90 107.838 83.387 88zm15.334 0h12.866l-19.298 19.298L98.72 88zm-32.927-2.207L73.586 78h32.827l.5.5 7.294 7.293L115.414 87l-24.707 24.707-.707.707L64.586 87l1.207-1.207zm2.62.207L74 80.414 79.586 86H68.414zm16 0L90 80.414 95.586 86H84.414zm16 0L106 80.414 111.586 86h-11.172zm-8-6h11.173L98 85.586 92.414 80zM82 85.586L87.586 80H76.414L82 85.586zM17.414 0L.707 16.707 0 17.414V0h17.414zM4.28 0L0 12.838V0h4.28zm10.306 0L2.288 12.298 6.388 0h8.198zM180 17.414L162.586 0H180v17.414zM165.414 0l12.298 12.298L173.612 0h-8.198zM180 12.838L175.72 0H180v12.838zM0 163h16.413l.5.5 7.294 7.293L25.414 172l-8 8H0v-17zm0 10h6.613l-2.334 7H0v-7zm14.586 7l7-7H8.72l-2.333 7h8.2zM0 165.414L5.586 171H0v-5.586zM10.414 171L16 165.414 21.586 171H10.414zm-8-6h11.172L8 170.586 2.414 165zM180 163h-16.413l-7.794 7.793-1.207 1.207 8 8H180v-17zm-14.586 17l-7-7h12.865l2.333 7h-8.2zM180 173h-6.613l2.334 7H180v-7zm-21.586-2l5.586-5.586 5.586 5.586h-11.172zM180 165.414L174.414 171H180v-5.586zm-8 5.172l5.586-5.586h-11.172l5.586 5.586zM152.933 25.653l1.414 1.414-33.94 33.942-1.416-1.416 33.943-33.94zm1.414 127.28l-1.414 1.414-33.942-33.94 1.416-1.416 33.94 33.943zm-127.28 1.414l-1.414-1.414 33.94-33.942 1.416 1.416-33.943 33.94zm-1.414-127.28l1.414-1.414 33.942 33.94-1.416 1.416-33.94-33.943zM0 85c2.21 0 4 1.79 4 4s-1.79 4-4 4v-8zm180 0c-2.21 0-4 1.79-4 4s1.79 4 4 4v-8zM94 0c0 2.21-1.79 4-4 4s-4-1.79-4-4h8zm0 180c0-2.21-1.79-4-4-4s-4 1.79-4 4h8z' fill='%239C92AC' fill-opacity='0.08' fill-rule='evenodd'/%3E%3C/svg%3E\");\n              }\n              * {\n                -webkit-tap-highlight-color: transparent !important;\n                outline: none !important;\n              }\n              #gatsby-noscript {\n                display: none;\n              }\n\n            `}\n          </style>\n        </Helmet>\n        <GlobalStateContext.Consumer>\n          {globalState => (\n            <>\n              <CornerCaseHandler\n                g={globalState}\n                currId={c.image.id}\n                nextId={c.nextId}\n              />\n\n              {/* Invisible helper links for prev/next navigation: clicking left side of the viewport links to prev, right side to next. */}\n              <Link\n                to={`/images/${c.prevId}`}\n                state={this.getStatePassForPrev()}\n                title={c.image.title}\n              >\n                <span\n                  style={{\n                    position: \"fixed\",\n                    height: \"100%\",\n                    width: \"50%\",\n                    left: \"0px\",\n                    zIndex: this.zIndexes[\"invisibleLinks\"],\n                  }}\n                ></span>\n              </Link>\n              <Link\n                to={`/images/${c.nextId}`}\n                state={this.getStatePassForNext()}\n                title={c.image.title}\n              >\n                <span\n                  style={{\n                    position: \"fixed\",\n                    height: \"100%\",\n                    width: \"50%\",\n                    right: \"0px\",\n                    zIndex: this.zIndexes[\"invisibleLinks\"],\n                  }}\n                ></span>\n              </Link>\n\n              {/* Navbuttons: prev/next (even though clicking anywhere on the page works, we want to help the user understand what they can do). */}\n              <Link\n                to={`/images/${c.prevId}`}\n                state={this.getStatePassForPrev()}\n              >\n                <FaArrowLeft\n                  className=\"arrowButtons\"\n                  style={{\n                    left: \"10px\",\n                    top: \"50%\",\n                    transform: \"translateY(-50%)\",\n                  }}\n                  title=\"Previous photo\"\n                />\n              </Link>\n              <Link\n                to={`/images/${c.nextId}`}\n                state={this.getStatePassForNext()}\n              >\n                <FaArrowRight\n                  className=\"arrowButtons\"\n                  style={{\n                    right: \"10px\",\n                    top: \"50%\",\n                    transform: \"translateY(-50%)\",\n                  }}\n                  title=\"Next photo\"\n                />\n              </Link>\n\n              {/* Navbutton: Top right 'x' to 'close' the image and return to gallery. */}\n              <span className=\"x\">\n                <Link\n                  // to={`/#id${c.image.id}`}\n                  // Change made here so it can link to the\n                  // main gallery page. Daniel0807\n                  to={`/images`}\n                  state={{ highlight: c.image.id }}\n                  title=\"Back to Gallery\"\n                >\n                  <FaTimesCircle style={{ right: \"10px\", top: \"10px\" }} />\n                </Link>\n              </span>\n\n              {/* Navbutton: Fullscreen toggle. */}\n              <span className=\"fullscreen\">\n                {this.state.isFullScreen && (\n                  <FaCompress\n                    style={{ right: \"10px\", bottom: \"10px\", cursor: \"pointer\" }}\n                    title=\"Exit full screen mode\"\n                    onClick={this.exitFullScreenAndRender}\n                  />\n                )}\n                {!this.state.isFullScreen && (\n                  <FaExpand\n                    style={{ right: \"10px\", bottom: \"10px\", cursor: \"pointer\" }}\n                    title=\"Enter full screen mode\"\n                    onClick={this.enterFullScreenAndRender}\n                  />\n                )}\n              </span>\n\n              {/* Navbutton: Download image. */}\n              <span className=\"download\">\n                <a href={c.image.fluid.originalImg} download>\n                  <FaDownload\n                    style={{ right: \"80px\", bottom: \"12px\" }}\n                    title=\"Download photo\"\n                  />\n                </a>\n              </span>\n\n              {/* Current image.\n               *     Includes a workaround to guarantee onLoad firing.\n               *     The issue:\n               *            If the image is already in cache, the browser may not fire onLoad event.\n               *            Occurs on initial load only, not with subsequent SPA navigation.\n               *     The workaround:\n               *            During the initial render we add the img to DOM with onLoad but without src properties.\n               *            Then we immediately re-render with the added src properties, causing onLoad to fire\n               *            even if the images are found in cache. */}\n              <img\n                className={`currentImage decoratedImage ${\n                  this.state.currentImageLoaded ? \"fade-in\" : \"hide\"\n                }`}\n                onLoad={this.currentImageLoaded}\n                src={\n                  globalState.initialRender ? \"\" : c.image.fluid.originalImg\n                } /* Workaround for onload firing. */\n                srcSet={\n                  globalState.initialRender ? \"\" : c.image.fluid.srcSet\n                } /* Workaround for onload firing. */\n                sizes={\n                  globalState.initialRender ? \"\" : c.image.fluid.sizes\n                } /* Workaround for onload firing. */\n                alt=\"\"\n                title={c.image.title}\n                importance=\"high\" /* Resource prioritization hint. */\n                style={{ zIndex: this.zIndexes[\"currentImage\"] }}\n              />\n\n              {/* Placeholder: If current image is not ready, display placeholder until current image has loaded, then transition. */}\n              <img\n                className={`currentImagePlaceholder ${\n                  this.state.currentImageLoaded ? \"fade-out\" : \"\"\n                }`}\n                src={c.image.fluid.tracedSVG}\n                alt=\"\"\n                style={{\n                  zIndex: this.zIndexes[\"currentImagePlaceholder\"],\n                  height: \"1337%\",\n                  borderRadius: \"0px\",\n                }}\n              />\n\n              {/* Fallback: If JS is disabled, degrade gracefully from placeholder-transition to just-show-current-image. */}\n              <noscript>\n                <img\n                  className=\"currentImage decoratedImage\"\n                  src={c.image.fluid.originalImg}\n                  srcSet={c.image.fluid.srcSet}\n                  sizes={c.image.fluid.sizes}\n                  alt=\"\"\n                  title={c.image.title}\n                  importance=\"high\"\n                  style={{ zIndex: this.zIndexes[\"currentImage\"] }}\n                />\n                <style>{`\n                        .currentImagePlaceholder {\n                          opacity: 0 !important\n                        }\n                      `}</style>\n              </noscript>\n\n              {/* Preload adjacent images (hide with CSS).\n               *     Why like this, and not with link rel prefetch?\n               *     1. link rel prefetch sometimes eats bandwidth from current image.\n               *     2. link rel prefetch can not be used with srcSet. */}\n              {this.state.currentImageLoaded && (\n                <>\n                  <img\n                    onLoad={this.nextImageLoaded}\n                    className=\"prefetchedImages\"\n                    src={\n                      globalState.initialRender\n                        ? \"\"\n                        : c.prefetchNext1.originalImg\n                    } /* Workaround for onload firing. */\n                    srcSet={\n                      globalState.initialRender ? \"\" : c.prefetchNext1.srcSet\n                    } /* Workaround for onload firing. */\n                    sizes={\n                      globalState.initialRender ? \"\" : c.prefetchNext1.sizes\n                    } /* Workaround for onload firing. */\n                    alt=\"\"\n                    importance=\"low\"\n                  />\n                  <img\n                    onLoad={this.prevImageLoaded}\n                    className=\"prefetchedImages\"\n                    src={\n                      globalState.initialRender\n                        ? \"\"\n                        : c.prefetchPrev.originalImg\n                    } /* Workaround for onload firing. */\n                    srcSet={\n                      globalState.initialRender ? \"\" : c.prefetchPrev.srcSet\n                    } /* Workaround for onload firing. */\n                    sizes={\n                      globalState.initialRender ? \"\" : c.prefetchPrev.sizes\n                    } /* Workaround for onload firing. */\n                    alt=\"\"\n                    importance=\"low\"\n                  />\n                  <img\n                    className=\"prefetchedImages\"\n                    src={\n                      c.prefetchNext2.originalImg\n                    } /* No onLoad event attached so no need for workaround here. */\n                    srcSet={c.prefetchNext2.srcSet}\n                    sizes={c.prefetchNext2.sizes}\n                    alt=\"\"\n                    importance=\"low\"\n                  />\n                </>\n              )}\n\n              <style jsx>\n                {`\n                  img {\n                    position: absolute;\n                    margin-left: auto;\n                    margin-right: auto;\n                    margin-top: auto;\n                    margin-bottom: auto;\n                    padding: 0;\n\n                    left: 5%;\n                    right: 5%;\n                    top: 3%;\n                    bottom: 3%;\n                    max-height: 94%;\n                    max-width: 90%;\n                  }\n\n                  @media only screen and (max-width: 1200px) {\n                    img {\n                      left: 0px;\n                      right: 0px;\n                      top: 0px;\n                      bottom: 0px;\n                      max-height: 100%;\n                      max-width: 100%;\n\n                      -webkit-box-shadow: 0 0 0 0 !important;\n                      -moz-box-shadow: 0 0 0 0 !important;\n                      box-shadow: 0 0 0 0 !important;\n                    }\n                  }\n\n                  .decoratedImage {\n                    -webkit-box-shadow: 1vw 1vh 5vh 0px rgba(0, 0, 0, 0.75);\n                    -moz-box-shadow: 1vw 1vh 5vh 0px rgba(0, 0, 0, 0.75);\n                    box-shadow: 1vw 1vh 5vh 0px rgba(0, 0, 0, 0.75);\n                    border-radius: 8px;\n                  }\n\n                  .hide {\n                    opacity: 0;\n                  }\n\n                  .fade-in {\n                    opacity: 1;\n                    transition: ${this.placeholderTransitionDuration}ms ease-in;\n                  }\n\n                  .fade-out {\n                    opacity: 0;\n                    transition: ${this.placeholderTransitionDuration}ms step-end;\n                  }\n\n                  .prefetchedImages {\n                    opacity: 0;\n                    z-index: ${this.zIndexes[\"prefetchedImages\"]};\n                  }\n\n                  @media only screen and (max-width: 1200px) {\n                    :global(.arrowButtons) {\n                      visibility: hidden;\n                    }\n                  }\n\n                  :global(svg) {\n                    position: fixed;\n                    font-size: 40px;\n                    fill: ${theme.color.brand.primary};\n                    opacity: 0.5;\n                    z-index: ${this.zIndexes[\"navButtons\"]};\n                  }\n\n                  :global(svg):hover {\n                    opacity: 1;\n                  }\n                `}\n              </style>\n            </>\n          )}\n        </GlobalStateContext.Consumer>\n      </>\n    )\n  }\n}\n\nexport default PostcardTemplate\n"],"sourceRoot":""}